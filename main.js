import { script } from "./example.js"

const modal = document.querySelector("#modal-pane")

document.getElementById("ico-play").onclick = runGameInBrower
document.getElementById("ico-stop").onclick = ()=> {
  document.querySelector("iframe")?.remove()
  document.querySelector("#modal-pane").style = "display: none"
}

function runGameInBrower() {
  //const script = Compiler.compile()
	const iframe = document.createElement('iframe')
	iframe.style = "border: none;"
	iframe.width = "100%"
	iframe.height = "100%"
	const html =
	`<body style="padding: 0; margin: 0; overflow: hidden; box-sizing: border-box;" > 
			<canvas id="canvas" style="background: rgb(77, 77, 77); image-rendering: pixelated" oncontextmenu="return false";></canvas> 
			<script> <!-- pre game bullshit -->
        const canvas = document.getElementById("canvas")
        const ctx = canvas.getContext("2d")

        canvas.width = 320
        canvas.height = 240
        
        canvas.style.width = "100%"
        canvas.style.height = "100%"
      </script>
      <script type="module">
        ${script}
      </script>
	</body>`

	iframe.srcdoc = html

  document.querySelector("#modal-pane").style = "display: flex"
  document.querySelector("#modal").replaceChildren()
  document.querySelector("#modal").append(iframe)
  document.querySelector("#modal").focus()
}

document.querySelector("#new-entity").onclick = () => {
  EntityManager.Create("Player")
  console.log(Game);
}

document.querySelector("#edit-entity").onclick = () => {
  EntityManager.Edit("Player", "hehehehehe")
  console.log(Game);
}





const Preferences = {}

const Game = {
  Sprite: {},
  Sound: {},
  Entity: {},
  Level: {},
  Commponent: {},

  Options: {},
}

const EntityManager = {
  Create: (name) => {
    Game.Entity[name] =
    `Create() {}
     Update() {}
     Render() {}
    `
  },
  Edit: (name, code) => {
    Game.Entity[name] = code
  }
}

const Compiler = {
  Compile: () => {
    let src = "//This code is automatically generated by WebSource Game Engine"
    src += "\n" + PreGameFragment
    src += "\n" + InputFragment
    src += "\n" + SpriteFunctions
    //load other functions here

    //load sprites
    //load entitites
    //load maps
    src += "\n" + GameFragment
    return src
  }

}

const PreGameFragment = `
const canvas = document.getElementById("canvas")
const ctx = canvas.getContext("2d")

canvas.width = 320
canvas.height = 240

canvas.style.width = "100%"
canvas.style.height = "100%"
`

const SpriteFunctions = `
//Sprite functions

function loadSprite(path) {
  let spr = new Image();
  spr.src = path;
  return spr;
};
`

const GameFragment = `
let mainArray = [] //set it to equal to the initial level

requestAnimationFrame(gameLoop)

function gameLoop() {
  ctx.clearRect(0, 0, canvas.width, canvas.height)
  mainArray.forEach(ent=> ent?.Update())
  mainArray.forEach(ent=> ent?.Render())
  requestAnimationFrame(gameLoop)
};
`

const InputFragment = `
let Input = {
  w: false,
  s: false,
  a: false,
  d: false
};

window.addEventListener("keydown", (event)=> {
  Input[event.key] = 1;
});

window.addEventListener("keyup", (event)=> {
  Input[event.key] = 0;
});
`

console.log(Compiler.Compile());


/*
let idealWidth = 0
const idealHeight = 240

const aspectRatio = screen.width / screen.height
idealWidth = Math.round(idealHeight * aspectRatio)

if (idealWidth & 1) idealWidth++
*/







/*
let scroll = 100

canvas.addEventListener("wheel", (event)=> {
  if (event.deltaY > 0) scroll -= 20
  if (event.deltaY < 0) scroll += 20

  scroll = (scroll < 100) ? 100 : scroll+0
  scroll = (scroll > 500) ? 500 : scroll-0
  
  canvas.style.width = ""+scroll+"%"
  canvas.style.height = ""+scroll+"%"
})
*/


/*
  compiler handles constructor
  user can only edit the method part of a class ->

  class {Name} {extends Parent} {

    constructor(x, y) {
      this.x = x
      this.y = y
      //built in variables here

      //list of components here

      this.Create()
      mainArray.push(this)
    }

  Create() {}
  Update() {}
  Render() {}

  }

*/